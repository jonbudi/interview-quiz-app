{"version":3,"sources":["components/QuizContainer.js","serviceWorker.js","index.js"],"names":["QuizContainer","props","showAll","bind","hideAll","document","getElementsByClassName","forEach","e","style","display","quizQuestions","quiz","filter","q","question","hidden","sort","a","b","aSection","section","bSection","compareSections","localeCompare","listItems","map","item","i","key","onClick","this","React","Component","QuestionContainer","state","isDisplayed","handleClick","setState","oldState","className","answer","image","sources","Question","Answer","color","src","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a83c9fb9.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./QuizContainer.scss\";\r\nimport quiz from '../resources/quiz.json';\r\n\r\nexport default class QuizContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.showAll = this.showAll.bind(this);\r\n        this.hideAll = this.hideAll.bind(this);\r\n    }\r\n\r\n    showAll() {\r\n        [...document.getElementsByClassName(\"answer-container\")].forEach(e => {\r\n            e.style.display = \"block\";\r\n        });\r\n    }\r\n\r\n    hideAll() {\r\n        [...document.getElementsByClassName(\"answer-container\")].forEach(e => {\r\n            e.style.display = \"none\";\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const quizQuestions = quiz.quiz.filter(q => q.question !== \"\" || q.hidden);\r\n        quizQuestions.sort((a, b) => {\r\n            var aSection = a.section || \"z\";\r\n            var bSection = b.section || \"z\";\r\n            var compareSections = aSection.localeCompare(bSection);\r\n            return compareSections !== 0\r\n                ? compareSections\r\n                : a.question.localeCompare(b.question);\r\n        });\r\n\r\n        const listItems = quizQuestions.map((item, i) =>\r\n            <QuestionContainer key={i} i={i} item={item} />\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <button onClick={this.showAll}>\r\n                    Show all\r\n                </button>\r\n                <button onClick={this.hideAll}>\r\n                    Hide all\r\n                </button>\r\n                <br />\r\n                <br />\r\n                {listItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass QuestionContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // isDisplayed: false\r\n            isDisplayed: true\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState(oldState => ({\r\n            isDisplayed: !oldState.isDisplayed\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const i = this.props.i;\r\n        const item = this.props.item;\r\n\r\n        return (\r\n            <div\r\n                className=\"question-container\"\r\n                onClick={this.handleClick}>\r\n                <Question\r\n                    key={`q${i}`}\r\n                    question={`${item.section ? `${item.section} - ` : \"\"}${item.question}`} />\r\n                <Answer\r\n                    key={`a${i}`}\r\n                    answer={item.answer}\r\n                    isDisplayed={this.state.isDisplayed}\r\n                    image={item.image}\r\n                    sources={item.sources} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Question extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"question\">\r\n                {this.props.question}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Answer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"answer-container\"\r\n                style={this.props.isDisplayed ? {} : { display: \"none\" }}>\r\n                {this.props.answer[0]\r\n                    ? this.props.answer.map((a, i) => {\r\n                        return (\r\n                            <div key={`a-${i}`} className=\"answer\">\r\n                                {a}\r\n                            </div>\r\n                        );\r\n                    })\r\n                    : <div style={{ color: \"red\" }}>Answer this!</div>\r\n                }\r\n                {this.props.image && <img src={this.props.image} />}\r\n                <div>\r\n                    {this.props.sources && this.props.sources.map((a, i) => {\r\n                        return (\r\n                        <a href={a}>{a}</a>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport QuizContainer from './components/QuizContainer';\nimport \"./styles/index.scss\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<QuizContainer />,\n    document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}