{"version":3,"sources":["components/QuizContainer.js","serviceWorker.js","index.js"],"names":["QuizContainer","props","showAll","bind","hideAll","document","getElementsByClassName","forEach","e","style","display","quizQuestions","quiz","filter","q","question","sort","a","b","aSection","section","bSection","compareSections","localeCompare","listItems","map","item","i","key","href","target","rel","onClick","this","React","Component","QuestionContainer","state","isDisplayed","handleClick","setState","oldState","className","answer","image","sources","type","Question","Answer","stopPropagation","hasSources","length","color","src","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a4df827c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./QuizContainer.scss\";\r\nimport quiz from '../resources/quiz.json';\r\n\r\nexport default class QuizContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.showAll = this.showAll.bind(this);\r\n        this.hideAll = this.hideAll.bind(this);\r\n    }\r\n\r\n    showAll() {\r\n        [...document.getElementsByClassName(\"answer-container\")].forEach(e => {\r\n            e.style.display = \"block\";\r\n        });\r\n    }\r\n\r\n    hideAll() {\r\n        [...document.getElementsByClassName(\"answer-container\")].forEach(e => {\r\n            e.style.display = \"none\";\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const quizQuestions = quiz.quiz.filter(q => q.question !== \"\");\r\n        quizQuestions.sort((a, b) => {\r\n            var aSection = a.section || \"z\";\r\n            var bSection = b.section || \"z\";\r\n            var compareSections = aSection.localeCompare(bSection);\r\n            return compareSections !== 0\r\n                ? compareSections\r\n                : a.question.localeCompare(b.question);\r\n        });\r\n\r\n        const listItems = quizQuestions.map((item, i) =>\r\n            <QuestionContainer key={i} i={i} item={item} />\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <h1>\r\n                    Get a job, dude.\r\n                </h1>\r\n                <a href=\"https://jonbudi.github.io/interview-quiz-app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jonbudi.github.io/interview-quiz-app/</a>\r\n                <br />\r\n                <br />\r\n                <button onClick={this.showAll}>\r\n                    Show all\r\n                </button>\r\n                <button onClick={this.hideAll}>\r\n                    Hide all\r\n                </button>\r\n                <br />\r\n                <br />\r\n                {listItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass QuestionContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // isDisplayed: false\r\n            isDisplayed: true\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState(oldState => ({\r\n            isDisplayed: !oldState.isDisplayed\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const i = this.props.i;\r\n        const item = this.props.item;\r\n\r\n        return (\r\n            <div\r\n                className=\"question-container\"\r\n                onClick={this.handleClick}>\r\n                <Question\r\n                    key={`q${i}`}\r\n                    question={`${item.section ? `${item.section} - ` : \"\"}${item.question}`} />\r\n                <Answer\r\n                    key={`a${i}`}\r\n                    answer={item.answer}\r\n                    isDisplayed={this.state.isDisplayed}\r\n                    image={item.image}\r\n                    sources={item.sources}\r\n                    type={item.type} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Question extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"question\">\r\n                {this.props.question}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Answer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const hasSources = this.props.sources && this.props.sources.length > 0;\r\n\r\n        return (\r\n            <div>\r\n                <div\r\n                    className=\"answer-container\"\r\n                    onClick={this.handleClick}\r\n                    style={this.props.isDisplayed ? {} : { display: \"none\" }}>\r\n                    {this.props.answer && this.props.answer[0]\r\n                        ? this.props.answer.map((a, i) => {\r\n                            if (this.props.type === \"code\") {\r\n                                return (\r\n                                    <div key={`a-${i}`} className=\"answer answer--code\">\r\n                                        <code>\r\n                                            {a}\r\n                                        </code>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                            else if (this.props.type === \"list\") {\r\n                                return (\r\n                                    <li key={`a-${i}`} className=\"answer\">\r\n                                        {a}\r\n                                    </li>\r\n                                );\r\n                            }\r\n                            else {\r\n                                return (\r\n                                    <div key={`a-${i}`} className=\"answer\">\r\n                                        {a}\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        })\r\n                        : <div style={{ color: \"red\" }}>Answer this!</div>\r\n                    }\r\n                    {this.props.image && <img src={this.props.image} alt={this.props.image} />}\r\n                </div>\r\n                <div className=\"sources\">\r\n                    {hasSources ? \"Source(s):\" : \"\"}\r\n                    {hasSources && this.props.sources.map((a, i) => {\r\n                        return (\r\n                            <div>\r\n                                <a href={a} target=\"_blank\" rel=\"noopener noreferrer\">{a}</a>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport QuizContainer from './components/QuizContainer';\r\nimport \"./styles/index.scss\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<QuizContainer />,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}