{
    "quiz": [
        {
            "question": "Class/Object",
            "answer": [
                "Class describes the type",
                "Object is the instance of a given class",
                "A class is a blueprint and an object is a building made from that blueprint"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "Accessor",
            "answer": [
                "getter/setter"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "Access Modifiers",
            "answer": [
                "public - can be accessed by any code within all assemblies",
                "private - can only be accessed by code in the same class",
                "protected - can only be accessed by code in the same class or any dervied classes",
                "internal - can be accessed by any code within the same assembly, but not from another assembly"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": "list"
        },
        {
            "question": "C# Boxing vs. Unboxing",
            "answer": [
                "Boxing - value to reference type",
                "<code>int i = 1;",
                "Object o = i;</code>",
                "",
                "Unboxing - reference to value type",
                "<code>Object o = 1;",
                "int i = (int)o</code>"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "C# Struct vs Object",
            "answer": [
                "Struct",
                "Value type",
                "use when you don't need to support inheritance or polymorphism",
                "",
                "Class",
                "Reference type"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/object-oriented-programming"
            ],
            "type": ""
        },
        {
            "question": "Generics",
            "answer": [
                "Allows you to write a class or method that can work with any data type"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/"
            ],
            "type": ""
        },
        {
            "question": "Generics Example",
            "answer": [
                "public class TestClass<T> { }"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": "code"
        },
        {
            "question": "Abstract vs. Interface",
            "answer": [
                "classes can implement as many interfaces (multiple inheritance), but only one abstact class",
                "abstract class can define non-abstract methods and define/declare methods, interfaces can only declare methods",
                "abstract methods can be protected, interface methods can only be public",
                "abstract class can contain methods/fields/constants"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-c-sharp/"
            ],
            "type": ""
        },
        {
            "question": "Abstract vs. Interface Example",
            "answer": [
                "public abstract class Abstract1",
                "{",
                "    public void Abstract1Method1() { }",
                "    public abstract void Abstract1Method2();",
                "    protected abstract void Abstract1Method3();",
                "    //'Abstract1.Abstract1Method4()':",
                "    //virtual or abstract members cannot be private",
                "    //private abstract void Abstract1Method4();",
                "}",
                "public interface IInterface1",
                "{",
                "    void IInterface1Method1();",
                "}",
                "public interface IInterface2",
                "{",
                "    void IInterface2Method1();",
                "}",
                "public class Class1 : Abstract1",
                "{",
                "    public override void Abstract1Method2() { }",
                "    protected override void Abstract1Method3() { }",
                "}",
                "public class Class2 : IInterface1, IInterface2",
                "{",
                "    public void IInterface1Method1() { }",
                "    public void IInterface2Method1() { }",
                "}",
                "public class Class3 : Abstract1, IInterface1",
                "{",
                "    public override void Abstract1Method2() { }",
                "    protected override void Abstract1Method3() { }",
                "    public void IInterface1Method1() { }",
                "}",
                "public class Class4 : Abstract1, IInterface1, IInterface2",
                "{",
                "    public override void Abstract1Method2() { }",
                "    protected override void Abstract1Method3() { }",
                "    public void IInterface1Method1() { }",
                "    public void IInterface2Method1() { }",
                "}"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": "code"
        },
        {
            "question": "using",
            "answer": [
                "ensures that the given IDisposable object's Dispose method is called after execution, even if an exception is thrown"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement"
            ],
            "type": ""
        },
        {
            "question": "Garbage Collector",
            "answer": [
                "non-determinalistic way that allows us to not have to manually free memory on the heap"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals"
            ],
            "type": ""
        },
        {
            "question": "delegate",
            "answer": [
                "type that represents references to methods",
                "allows methods to be passed as parameters",
                "used in LINQ (lambda expressions)"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/",
                "https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1?view=netframework-4.8"
            ],
            "type": "list"
        },
        {
            "question": "delegate/lambda LINQ example",
            "answer": [
                "// with delegate",
                "List<int> result = list.FindAll(",
                "    delegate (int i)",
                "    {",
                "        return i % 2 == 0;",
                "    }",
                ");",
                "// with lambda expression",
                "List<int> result = list.FindAll(i => i % 2 == 0);"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/standard/delegates-lambdas"
            ],
            "type": "code"
        },
        {
            "question": "lambda",
            "answer": [
                "another way to define a delegate, syntatic sugar"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "C# volatile",
            "answer": [
                "indicates field might be modified by multiple threads at the same time"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile"
            ],
            "type": ""
        },
        {
            "question": "virtual",
            "answer": [
                "signals this method/property/indexer/event declaration can be overriden in its derived class"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "virtual Example",
            "answer": [
                "public abstract class Abstract1",
                "{",
                "    public virtual void Abstract1Method1() { }",
                "    public void Abstract1Method2() { }",
                "}",
                "public class Class1 : Abstract1",
                "{",
                "    public override void Abstract1Method1() { }",
                "    //'Class1.Abstract1Method1()' hides inherited",
                "    // member 'Abstract1.Abstract1Method1()'.",
                "    // Use the new keyword if hiding was intended.",
                "    public new void Abstract1Method2() { }",
                "}"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": "code"
        },
        {
            "question": "unsafe",
            "answer": [
                "denotes unsafe context, which is required for any operation involving pointers"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/unsafe"
            ],
            "type": ""
        },
        {
            "question": "Static constructor",
            "answer": [
                "Static constructor only executes once in the entire life cycle of the class",
                "before any instance constructor is invoked or member is accessed"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-constructors"
            ],
            "type": ""
        },
        {
            "question": "String vs. string vs. StringBuilder",
            "answer": [
                "String - System.String is an alias for string",
                "string - immutable",
                "StringBuilder - mutable"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "Value vs. Reference",
            "answer": [
                "value",
                "holds value",
                "stored on stack",
                "reference",
                "holds memory address",
                "stored on heap"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "Value vs. Reference Example",
            "answer": [
                "static void Main(string[] args)",
                "{",
                "    int arg;",
                "",
                "    // Passing by value.",
                "    // The value of arg in Main is not changed.",
                "    arg = 4;",
                "    squareVal(arg);",
                "    Console.WriteLine(arg);",
                "    // Output: 4",
                "",
                "    // Passing by reference.",
                "    // The value of arg in Main is changed.",
                "    arg = 4;",
                "    squareRef(ref arg);",
                "    Console.WriteLine(arg);",
                "    // Output: 16 ",
                "}",
                "",
                "static void squareVal(int valParameter)",
                "{",
                "    valParameter *= valParameter;",
                "}",
                "",
                "// Passing by reference",
                "static void squareRef(ref int refParameter)",
                "{",
                "    refParameter *= refParameter;",
                "}"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/passing-parameters"
            ],
            "type": "code"
        },
        {
            "question": ".NET CLR",
            "answer": [
                "Common Language Runtime - runs managed code (written in .NET), unmanaged code is written outside of .NET"
            ],
            "image": "",
            "section": "C# .NET",
            "sources": [],
            "type": ""
        },
        {
            "question": ".NET routing",
            "answer": [
                "routes urls of incoming requests and maps them to actions"
            ],
            "image": "",
            "section": "C# .NET",
            "sources": [],
            "type": ""
        },
        {
            "question": "Azure Pipelines",
            "answer": [
                "cloud service that lets you automatically build/test project"
            ],
            "image": "",
            "section": "C# Azure",
            "sources": [],
            "type": ""
        },
        {
            "question": "Azure Artifacts",
            "answer": [
                "create package feeds (like from NuGet) to organize/control packages"
            ],
            "image": "",
            "section": "C# Azure",
            "sources": [],
            "type": ""
        },
        {
            "question": "POCO",
            "answer": [
                "Plain Old CLR/C# Object",
                "a simple object that contains data",
                "they don't care what/how they are being used"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "How to debug an issue",
            "answer": [
                "Check logs",
                "Ensure code handles exceptions, with appropriate error messages"
            ],
            "image": "",
            "section": "General",
            "sources": [],
            "type": "list"
        },
        {
            "question": "Abstract classes",
            "answer": [
                "Base class only and cannot be instantiated",
                "Can have non-abstract methods"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": "ASP.NET MVC",
            "answer": [
                "Model - Represents the state of application and contains all business logic",
                "View - Razor view engine",
                "Controller - Responds to user input by routing requests to controller actions"
            ],
            "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/1024px-MVC-Process.svg.png",
            "section": "C# .NET",
            "sources": [],
            "type": "list"
        },
        {
            "question": "Service Lifetimes",
            "answer": [
                "Transient - created each time they're requested from the service container",
                "Scoped - created once per client request",
                "Singleton - created the first time they're requested"
            ],
            "image": "",
            "section": "C# ASP.NET MVC Core",
            "sources": [
                "https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes"
            ],
            "type": ""
        },
        {
            "question": "Application Pool",
            "answer": [
                "Allows isolation of applications on the same server",
                "If there is an error in one app, it won't take down the other applications"
            ],
            "image": "",
            "section": "C# IIS",
            "sources": [],
            "type": ""
        },
        {
            "question": "Async Practical Usage",
            "answer": [
                "Three APIs being called in a single action, each takes 500ms.",
                "Synchronous calls = 1500ms, Async = 500ms"
            ],
            "image": "",
            "section": "C#",
            "sources": [],
            "type": ""
        },
        {
            "question": ".NET Framework vs. .NET Core",
            "answer": [
                ".NET Core",
                "Cross-platform",
                "Microservices/Docker containers",
                ".NET Framework",
                "App is currently using .NET Framework (MSFT recommends extending rather than migrating",
                "App uses third-party .NET libraries or NuGet packages not available in .NET Core"
            ],
            "image": "",
            "section": "C#",
            "sources": [
                "https://docs.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server"
            ],
            "type": ""
        },
        {
            "question": "Tag Helpers",
            "answer": [
                "Assist the server-side creation of HTML elements within a Razor file"
            ],
            "image": "",
            "section": "C# ASP.NET Core",
            "sources": [
                "https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro?view=aspnetcore-3.1"
            ],
            "type": ""
        }
    ]
}