{
	"quiz": [
		{
			"question": "Dependency Injection",
			"answer": [
				"technique to pass a dependancy into an object",
				"provide the object what it needs, instead of having the object construct it"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "Hash Collision",
			"answer": [
				"occurs when a hash function returns the same bucket location for two different keys"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "Hash Table",
			"answer": [
				""
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "Hash Function",
			"answer": [
				"Deterministic, meaning given input will always generate the same hash function"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "4 OOP principals",
			"answer": [
				"Abstraction",
				"Encapsulation",
				"Inheritance",
				"Polymorphism"
			],
			"image": "",
			"section": "OOP",
			"sources": [],
			"type": "list"
		},
		{
			"question": "Abstraction",
			"answer": [
				"Hide complexity and only show essential info to the user"
			],
			"image": "",
			"section": "OOP",
			"sources": [],
			"type": ""
		},
		{
			"question": "Encapsulation",
			"answer": [
				"Grouping related properties, methods, and other members as a single unit/object"
			],
			"image": "",
			"section": "OOP",
			"sources": [],
			"type": ""
		},
		{
			"question": "Inheritance",
			"answer": [
				"Create new classes based on an existing class"
			],
			"image": "",
			"section": "OOP",
			"sources": [],
			"type": ""
		},
		{
			"question": "Polymorphism",
			"answer": [
				"Allows the ability to take on more than one form",
				"method overloading - method with the same name, but different parameters",
				"method overriding - change the behavior defined in the base/parent class"
			],
			"image": "",
			"section": "OOP",
			"sources": [],
			"type": ""
		},
		{
			"question": "SOLID principles",
			"answer": [
				"Single responsibility principle",
				"A class should only have a single responsibility",
				"",
				"Openâ€“closed principle",
				"Software entities should be open for extension, but closed for modification",
				"",
				"Liskov substitution principle",
				"Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program. See also design by contract.",
				"",
				"Interface segregation principle",
				"Many client-specific interfaces are better than one general-purpose interface.",
				"",
				"Dependency inversion principle",
				"One should depend upon abstractions, [not] concretions."
			],
			"image": "",
			"section": "OOP",
			"sources": [
				"http://en.wikipedia.org/wiki/SOLID"
			]
		},
		{
			"question": "Design Patterns",
			"answer": [
				"Creational",
				"provide the capability to create objects based on a required criteria and in a controlled way",
				"Singleton",
				"Ensure class has only one instance to be used across an entire system",
				"",
				"Abstract factory",
				"",
				"Structural",
				"organizing different classes and objects to form larger structures and provide new functionality",
				"Decorator",
				"",
				"Facade",
				"",
				"Behavioral",
				"identifying common communication patterns between objects and realize these patterns",
				"Iterator"
			],
			"image": "",
			"section": "OOP",
			"sources": [],
			"type": ""
		},
		{
			"question": "N-tier architecture",
			"answer": [
				"Dividing application into multiple tiers, such as data tier, business tier, view tier"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "Service Oriented Architecture",
			"answer": [
				"structuring your application into multiple services separating concerns while allowing them to communicate with one another"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "TCP vs UDP",
			"answer": [
				"Transmission Control Protocol (TCP) is a connection-oriented protocol that computers use to communicate over the internet. It is one of the main protocols in TCP/IP networks. TCP provides error-checking and guarantees delivery of data and that packets will be delivered in the order they were sent.",
				"",
				"User Datagram Protocol (UDP) is a connectionless protocol that works just like TCP but assumes that error-checking and recovery services are not required. Instead, UDP continuously sends datagrams to the recipient whether they receive them or not."
			],
			"image": "",
			"section": "Security",
			"sources": [],
			"type": ""
		},
		{
			"question": "Java HashSet vs TreeSet",
			"answer": [
				"HashSet is unordered.",
				"TreeSet is stored in sorted, asc order."
			],
			"image": "",
			"section": "Java",
			"sources": [],
			"type": ""
		},
		{
			"question": "Java hashCode()",
			"answer": [
				"an integer value generated by a hashing algorithm"
			],
			"image": "",
			"section": "Java",
			"sources": [],
			"type": ""
		},
		{
			"question": "Java Garbage Collection",
			"answer": [
				"automatic memory management, unused objected are deleted to free up memory"
			],
			"image": "",
			"section": "Java",
			"sources": [],
			"type": ""
		},
		{
			"question": "Constraint",
			"answer": [
				"rules that can be applied to the data",
				"PRIMARY KEY - uniquely identify row/record in a given table, can be multiple columns",
				"FOREIGN KEY - identify row/record in another table",
				"NOT NULL",
				"DEFAULT",
				"UNIQUE",
				"CHECK"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Delete vs. Truncate",
			"answer": [
				"Delete logs each transaction and can be rolled back, Truncate cannot",
				"Delete can use WHERE clause, Truncate cannot",
				"Delete fires triggers, Truncate does not",
				"Delete retains IDENTITY, Truncate resets IDENTITY back to SEED"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": "list"
		},
		{
			"question": "commands (subsets of SQL)",
			"answer": [
				"DDL - data definition language",
				"DML - data manipulation language (CRUD)",
				"DCL - data control language",
				"TCL - transaction control language"
			],
			"image": "https://i.stack.imgur.com/7uUaJ.png",
			"section": "SQL",
			"sources": [],
			"type": "list"
		},
		{
			"question": "Identity",
			"answer": [
				"type of column that generates a unique key value based on a given seed, increment (defaults to 1, 1)",
				"this value increases automatically"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Alias",
			"answer": [
				"temporary name assigned to table or column (AS keyword)"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "SQL Stored Procedures",
			"answer": [
				"subroutine/function that you can save to be run with or without parameters"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Stored Procedure vs. Function",
			"answer": [
				"SP is precompiled, Function is compiled and executed every time",
				"SP can return 0, 1, or multiple values, Function return scalar or table",
				"SP can call Functions, but Functions cannot call SP"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": "list"
		},
		{
			"question": "Joins",
			"answer": [
				"inner - records that have matching values in both tables",
				"left - all records from the left table and matched records in the right",
				"right - all records from the right table and matched records in the left",
				"outer - all records"
			],
			"image": "https://i.stack.imgur.com/iJUMl.png",
			"section": "SQL",
			"sources": [],
			"type": "list"
		},
		{
			"question": "Injection",
			"answer": [
				"technique used to maliciously modify the data"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Prevent SQL Injection",
			"answer": [
				"SqlCommand and add parameters to SqlParameterCollection",
				"ORM (like Entity Framework)",
				"Escape input"
			],
			"image": "",
			"section": "SQL",
			"sources": [
				"https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.parameters?redirectedfrom=MSDN&view=netframework-4.8#System_Data_SqlClient_SqlCommand_Parameters"
			],
			"type": ""
		},
		{
			"question": "SQL Trigger",
			"answer": [
				"a piece of SQL code that runs on a given event"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Get Identity of Inserted Row",
			"answer": [
				"@@Identity returns the last identity value in current session across all scopes",
				"Scope_Identity() returns the last identity in current session in current scope (use this in most cases)"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "SQL Server vs. Oracle",
			"answer": [
				"SQL Server",
				"Transact-SQL (T-SQL)",
				"easier to work with, optimize better",
				"",
				"Orcale",
				"Procedural Language SQL (PL-SQL)",
				""
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "SQL View vs Temp Table",
			"answer": [
				"View",
				"Basically a select statement shortcut (executes every time)",
				"",
				"Temp Table",
				"Takes space/permission"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "CTE",
			"answer": [
				"Common table expression allows definition of a temporary result set within the given scope"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "SQL Clustered vs. Non-Clustered Index",
			"answer": [
				"Clustered",
				"Index that sorts datarows on one of their key values",
				"Non-Clustered",
				"allows for multiple indexes for a given column",
				"faster lookups but extra storage"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "SQL Cursor",
			"answer": [
				"enables the processing of individual rows returned by a query"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Database Normalization",
			"answer": [
				"Design technique to reduce redunancy and dependacity of data, used to organize larger tables into smaller tables with linked relationships"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "How to store passwords in database",
			"answer": [
				"Store hashed+salted password into table",
				"Hash returns value that cannot be inverted",
				"Salt is added to make the hash output unique"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Rainbow table",
			"answer": [
				"pre-computed lookup tables to crack password hashes"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Object/Relation Mapping Framework (ORM)",
			"answer": [
				"Entity Framework"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "Git vs. SVN",
			"answer": [
				"Git distributed version control",
				"SVN centralized"
			],
			"image": "",
			"section": "Git",
			"sources": [],
			"type": ""
		},
		{
			"question": "How to create a new branch",
			"answer": [
				"git branch {new_branch_name}",
				"// checkout and branch shortcut:",
				"git checkout -b {new_branch_name}"
			],
			"image": "",
			"section": "Git",
			"sources": [],
			"type": "code"
		},
		{
			"question": "Web Server",
			"answer": [
				"Software/Hardware needed to host a web application"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "Ports for HTTP/HTTPS",
			"answer": [
				"HTTP: 80",
				"HTTPS: 443"
			],
			"image": "",
			"section": "Security",
			"sources": [],
			"type": ""
		},
		{
			"question": "Apache Kafka",
			"answer": [
				"High throughout distributed messaging system"
			],
			"image": "",
			"section": "Kafka",
			"sources": [],
			"type": ""
		},
		{
			"question": "Data Warehouse",
			"answer": [
				"large store of data used for business analysis"
			],
			"image": "",
			"section": "SQL",
			"sources": [],
			"type": ""
		},
		{
			"question": "Agile",
			"answer": [
				"software-development methodology tool used to gather requirements before development and provides flexibility for any changes through a collaborative effort of cross-function teams and end users"
			],
			"image": "",
			"section": "Agile/Scrum",
			"sources": [],
			"type": ""
		},
		{
			"question": "Scrum",
			"answer": [
				"Defines roles, sets of processes (sprint planning, review, retro, etc...) to provide transparency to the stakeholders while giving developers achievable goals within a short period of time (two weeks)"
			],
			"image": "",
			"section": "Agile/Scrum",
			"sources": [],
			"type": ""
		},
		{
			"question": "SDLC steps",
			"answer": [
				"Plan",
				"Analyze",
				"Design",
				"Implement",
				"Test/Deploy",
				"Maintain"
			],
			"image": "",
			"section": "Agile/Scrum",
			"sources": [],
			"type": "list"
		},
		{
			"question": "Product Owner",
			"answer": [
				"Manages the Product Backlog (priority, clear goals)"
			],
			"image": "",
			"section": "Agile/Scrum",
			"sources": [],
			"type": ""
		},
		{
			"question": "TLS",
			"answer": [
				"Transport Layer Security",
				"protocall to secure communication between web server and browser"
			],
			"image": "",
			"section": "Security",
			"sources": [],
			"type": ""
		},
		{
			"question": "",
			"answer": [
				""
			],
			"sources": [],
			"type": ""
		},
		{
			"question": "BFS vs DFS",
			"answer": [
				"Breadth First Search",
				"Level Order Traversal",
				"Uses queue",
				"Recursive",
				"",
				"Depth First Search",
				"Uses stack",
				"Iterative"
			],
			"image": "",
			"section": "Algorithms",
			"sources": [],
			"type": ""
		},
		{
			"question": "$",
			"answer": [
				"$ is an alias for jQuery"
			],
			"image": "",
			"section": "jQuery",
			"sources": [],
			"type": ""
		},
		{
			"question": "Tell me about yourself",
			"answer": [
				"Name",
				"Job Title for X years",
				"College",
				"Describe job (jack of all trades?)",
				"Hobbies (quantitive investing, basketball)",
				"Young, going to make mistakes, quick learner, ready to work"
			],
			"image": "",
			"section": "Behaviorial",
			"sources": [],
			"type": "list"
		},
		{
			"question": "STAR method",
			"answer": [
				"Situation",
				"Task",
				"Action",
				"Result"
			],
			"image": "",
			"section": "Behaviorial",
			"sources": [
				"https://www.themuse.com/advice/star-interview-method"
			],
			"type": "list"
		},
		{
			"question": "Talk about a time when you had to work closely with someone whose personality was very different from yours.",
			"answer": [
				"try/catch",
				"after building rapport, know the person tendancies",
				"if the person is analytical, use that",
				"trade-offs"
			],
			"image": "",
			"section": "Behaviorial",
			"sources": [],
			"type": ""
		},
		{
			"question": "Give me an example of a time you faced a conflict while working on a team. How did you handle that?",
			"answer": [
				"de-escalate",
				"apologize if wrong",
				"trade-offs"
			],
			"image": "",
			"section": "Behaviorial",
			"sources": [],
			"type": ""
		},
		{
			"question": "Talking Points",
			"answer": [
				"Play to teammate's strength after building rapport",
				"Handling things that are in our control when given a hard deadline (responsive redesign in order to sell company)",
				"Ads Manager was a new project",
				"Transitioning from waterfall to agile/scrum",
				"Transitioning from SVN to Git, release management",
				"Working with UX to improve product",
				"Ads mistagging",
				"Outsourcing"
			],
			"image": "",
			"section": "Behaviorial",
			"sources": [],
			"type": ""
		},
		{
			"question": "What was your role?",
			"answer": [
				"Worked on consumer facing .NET web applications (jdpower.com and NADAguides.com)",
				"Worked on APIs, beginning the work to migrate from a monolithic app",
				"Automated QA (selenium)",
				"Ads (javascript)",
				"CI/CD pipelines"
			],
			"image": "",
			"section": "Resume",
			"sources": [],
			"type": ""
		},
		{
			"question": "Pub/sub",
			"answer": [
				"Sends messages (publishers) to subscribers"
			],
			"image": "",
			"section": "General",
			"sources": [],
			"type": ""
		},
		{
			"question": "Microservices",
			"answer": [
				"Technique used to arrange an application into loosely coupled services"
			],
			"image": "",
			"section": "Architecture",
			"sources": [
				"https://en.wikipedia.org/wiki/Microservices"
			],
			"type": ""
		},
		{
			"question": "Benefits",
			"answer": [
				"Components",
				"Virtual DOM - faster than vanilla JavaScript"
			],
			"image": "",
			"section": "React",
			"sources": [],
			"type": ""
		},
		{
			"question": "Singleton",
			"answer": [
				"class Singleton",
				"{",
				"    private static Singleton StaticInstance = null;",
				"    private static readonly object Lock = new object();",
				"    private Singleton() { }",
				"    public static Singleton GetInstance()",
				"    {",
				"        lock (Lock)",
				"        {",
				"            if (StaticInstance == null)",
				"            {",
				"                StaticInstance = new Singleton();",
				"            }",
				"            return StaticInstance;",
				"        }",
				"    }",
				"}",
				"",
				"class Singleton",
				"{",
				"    private static readonly Lazy<Singleton> Lazy =",
				"        new Lazy<Singleton>(() => new Singleton());",
				"    public static Singleton Instance => Lazy.Value;",
				"    private Singleton() { }",
				"}"
			],
			"image": "",
			"section": "OOP - Design Pattern",
			"sources": [
				"https://csharpindepth.com/articles/singleton"
			],
			"type": "code"
		},
		{
			"question": "Fibonacci",
			"answer": [
				"private static Dictionary<int, int> FibDictionary",
				"    = new Dictionary<int, int>();",
				"public static int FibRecursive(int n)",
				"{",
				"    if (n <= 1)",
				"    {",
				"        return 1;",
				"    }",
				"    else if (FibDictionary.TryGetValue(n, out var value))",
				"    {",
				"        return value;",
				"    }",
				"    else",
				"    {",
				"        var result = FibRecursive(n - 1)",
				"            + FibRecursive(n - 2);",
				"        FibDictionary.Add(n, result);",
				"        return result;",
				"    }",
				"}",
				"public static int FibIterative(int n)",
				"{",
				"    var result = 1;",
				"    var prev = 1;",
				"    var prevPrev = 1;",
				"    for (var i = 0; i < n - 1; ++i)",
				"    {",
				"        result = prev + prevPrev;",
				"        prevPrev = prev;",
				"        prev = result;",
				"    }",
				"    return result;",
				"}"
			],
			"image": "",
			"section": "Code",
			"sources": [],
			"type": "code"
		}
	]
}